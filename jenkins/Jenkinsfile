pipeline {
    agent any
    stages {
         stage('initialize') {
            steps {
                echo '초기화 진행'
                script {
                    // 현재 시간을 밀리초로 저장
                    env.CURRENT_TIME = new Date().getTime().toString()
                    def commitMessage = sh(script: 'git log --format=%B -n 1 HEAD', returnStdout: true).trim()
                    def jenkinsCommit = commitMessage.contains('젠킨스 빌드 및 배포가 완료되었습니다. https://oneflex.info:20001')
                    def skipDeploy = commitMessage.contains('--skipDeploy')
                    env.shouldDeploy = !jenkinsCommit && !skipDeploy
                }
                sh "node --version"
                sh "java --version"

            }
        }

        stage('checkout') {
            when {
                expression { return env.shouldDeploy }
            }
            steps {
                // 형식화된 현재 시간을 쉘 스크립트로 전달하여 출력
                sh "echo 'Current time: ${env.CURRENT_TIME}'"
                // git 체크아웃
                git url: 'https://github.com/Epstein-Conbus/simple-node-js-react-npm-app.git', branch: 'master'
            }
        }
        stage('deploy') {
            when {
                expression { return env.shouldDeploy }
            }
            steps {
                echo 'deploying the application...'
                sh "pnpm install"
            }
        }
        stage('file edit') {
            when {
                expression { return env.shouldDeploy }
            }
            steps {
                script {
                    def filePath = './src/App.js'
                    def fileContents = readFile(filePath).trim()
                    def oldPattern = 'console\\.log\\(\\s*\\d+\\)'
                    def newString = "console.log(${env.CURRENT_TIME})"

                    // 파일 내에서 특정 패턴을 찾아서 치환
                    def modifiedContents = fileContents.replaceAll(oldPattern, newString)

                    // 수정된 내용을 다시 파일에 쓰기
                    writeFile(file: filePath, text: modifiedContents)

                    echo "파일 수정 완료: ${filePath}"
                }
            }
        }
        stage('Merge to Master') {
            when {
                expression { return env.shouldDeploy }
            }
            steps {
                // 변경 사항을 master 브랜치에 머지
                sh """
                    git add .
                    if git diff-index --quiet HEAD; then
                        echo "No changes detected"
                    else
                        git commit -m "젠킨스 빌드 및 배포가 완료되었습니다. https://oneflex.info:20001"
                        git pull origin master
                        git merge --no-ff master
                        git push origin master
                    fi
                """
            }
        }
    }
}