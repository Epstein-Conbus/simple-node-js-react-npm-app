pipeline {
    agent any

    tools {nodejs "nodejs-18"}

    environment {
            GIT_CREDENTIALS_ID = 'Epstein-Conbus'  // Jenkins에 설정된 Git 자격 증명 ID
    }


    stages {
         stage('initialize') {
            steps {
                sh "java --version"
                sh "node --version"
                echo '배포 필요 여부 확인중...'
                script {
                    // 현재 시간을 밀리초로 저장
                    env.CURRENT_TIME = new Date().getTime().toString()
                    def commitMessage = sh(script: 'git log --format=%B -n 1 HEAD', returnStdout: true).trim()
                    def jenkinsCommit = commitMessage.contains('젠킨스 빌드 및 배포가 완료되었습니다.')
                    def skipDeploy = commitMessage.contains('--skip')
                    env.shouldDeploy = (!jenkinsCommit && !skipDeploy).toString()
                    if (env.shouldDeploy == 'true') {
                        echo '배포 필요, 다음 파이프라인 진행'
                    } else {
                        echo '배포 불필요, 다음 파이프라인 스킵'
                    }
                }
            }
        }

        stage('deploy') {
            when {
                expression { return env.shouldDeploy == 'true' }
            }
            steps {
                echo 'deploying the application...'
                sh "npm install"
            }
        }
        stage('file edit') {
            when {
                expression { return env.shouldDeploy == 'true' }
            }
            steps {
                script {
                    def filePath = './src/App.js'
                    def fileContents = readFile(filePath).trim()
                    def oldPattern = 'console\\.log\\(\\s*\\d+\\)'
                    def newString = "console.log(${env.CURRENT_TIME})"

                    // 파일 내에서 특정 패턴을 찾아서 치환
                    def modifiedContents = fileContents.replaceAll(oldPattern, newString)

                    // 수정된 내용을 다시 파일에 쓰기
                    writeFile(file: filePath, text: modifiedContents)

                    echo "파일 수정 완료: ${filePath}"
                }
            }
        }
        stage('Merge to Master') {
            when {
                expression { return env.shouldDeploy == 'true' }
            }
            steps {
                script {
                    withCredentials([string(credentialsId: env.GIT_CREDENTIALS_ID, variable: 'token')]) {
                        sh 'git config user.email "nobody@nowhere"'
                        sh 'git config user.name "Jenkins"'

                        def diff = sh("git diff-index --quiet HEAD").toString()
                        if (diff.isEmpty()) {
                            echo '변경사항이 없음'
                        } else {
                            sh """
                                git add .
                                sh 'git checkout master'
                                sh 'git pull origin master'
                                git commit -m "젠킨스 빌드 및 배포가 완료되었습니다."
                                git merge --no-ff master
                            """
                            sh 'git push https://$token@github.com/Epstein-Conbus/simple-node-js-react-npm-app.git'
                        }
                    }
                }
            }
        }
    }
}